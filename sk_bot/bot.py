import config
import os
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.utils.markdown import text
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import keyboard as kb
import numpy as np
from numpy import argmax
import random

from keyboards import kb_client, kb_menu, kb_play, kb_return_menu
import matplotlib.pyplot as plt
#%matplotlib inline
#import librosa
#import librosa.display
import IPython.display
from PIL import Image


HELP_COMMAND = '''
/help - 
/start
/test1
/test2
/test3
/dice - –ü—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã /dice –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç –∏–≥—Ä–∞–ª—å–Ω—ã–π –∫—É–±–∏–∫.
/password
'''
# –ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞       
b = Bot(config.TOKEN)
dp = Dispatcher(b)
TOKEN = os.getenv(config.TOKEN)

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await b.send_message(chat_id=message.from_user.id,
                                   text = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ò—Å–ø–æ–ª—å–∑—É–π /help, '
                                   '—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥!')
    await message.delete()

@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await message.reply(text=HELP_COMMAND)
    await message.delete()

@dp.message_handler(commands=['password'])
async def start_password_command(message: types.Message):
    await b.send_message(chat_id=message.from_user.id,
                         text='–ü—Ä–∏–≤–µ—Ç, —è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π. –ù–∞ –≤—ã–±–æ—Ä –∏–º–µ–µ—Ç—Å—è 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π: —Å–ª–æ–∂–Ω—ã–π, —Å—Ä–µ–¥–Ω–∏–π, –ª–µ–≥–∫–∏–π.',
                         reply_markup=kb_client)
    await message.delete()

@dp.message_handler(commands=['help'])
async def start(message: types.Message):
    await message.reply('all commands = /gen/help')

@dp.message_handler(commands=['dice'])
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤", reply_markup=kb_return_menu)
    await message.delete()

@dp.message_handler(commands=['menu'])
async def open_main_menu(message: types.Message):
    await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!',
                         reply_markup=kb_menu)
    await message.delete()    

@dp.message_handler(Text(equals='Menu'))
async def open_kb(message: types.Message):
    await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!',
                         reply_markup=kb_menu)
    await message.delete()

@dp.message_handler(Text(equals='Main menu'))
async def open_kb(message: types.Message):
    await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!',
                         reply_markup=kb_menu)
    await message.delete()   

@dp.message_handler(Text(equals='password'))
async def start_password_command(message: types.Message):
    await b.send_message(chat_id=message.from_user.id,
                         text='–ü—Ä–∏–≤–µ—Ç, —è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π. –ù–∞ –≤—ã–±–æ—Ä –∏–º–µ–µ—Ç—Å—è 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π: —Å–ª–æ–∂–Ω—ã–π, —Å—Ä–µ–¥–Ω–∏–π, –ª–µ–≥–∫–∏–π.',
                         reply_markup=kb_client)
    await message.delete() 

@dp.message_handler(Text(equals='Hard'))
async def passgen_hard(message: types.Message):
    try:
        password = ''
        alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
        digits = '1234567890'
        signs = '!@#$%&'
        sumlist = alphabet + digits + signs
        for i in range(1, 12):
            password += random.choice(sumlist)
        await message.reply('–í–∞—à —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–∏–º\n ' 
                            + password 
                            + '\n–†–∞–¥ –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω!', 
                            reply_markup=kb_return_menu)
        await message.delete()
    except:
        await message.reply('ERRORE')
        await message.delete()

@dp.message_handler(Text(equals='Medium'))
async def passgen_medium(message: types.Message):
    try:
        password = ''
        alphabet = 'abcdefghijklmnopqrstuvwxyz'
        digits = '1234567890'
        signs = '!@#$%&'
        sumlist = alphabet + digits + signs
        for i in range(1, 12):
            password += random.choice(sumlist)
        await message.reply('–í–∞—à –ø–∞—Ä–æ–ª—å —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–∏–º\n ' 
                            + password 
                            + '\n–†–∞–¥ –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω!',
                            reply_markup=kb_return_menu)
        await message.delete()
    except:
        await message.reply('ERRORE')
        await message.delete()

@dp.message_handler(Text(equals='Light'))
async def passgen_light(message: types.Message):
    try:
        password = ''
        alphabet = 'abcdefghijklmnopqrstuvwxyz'
        digits = '1234567890'
        sumlist = alphabet + digits
        for i in range(1, 8):
            password += random.choice(sumlist)
        await message.reply('–í–∞—à –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–∏–º\n ' 
                            + password 
                            + '\n–†–∞–¥ –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω!',
                            reply_markup=kb_return_menu)
        await message.delete()
    except:
        await message.reply('ERRORE')
        await message.delete()

@dp.message_handler(commands=['test1'])
async def test_one_command(message: types.Message):
    await b.send_message(chat_id=message.from_user.id,
                         text="–ü—Ä–∏–≤–µ—Ç! –Ø —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ/–∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞.", reply_markup=kb_play)

@dp.message_handler(Text(equals="–ü–æ–∏–≥—Ä–∞–µ–º?"))
async def find_file_ids(message: types.Message):
    for file in os.listdir('music/'):
        if file.split('.')[-1] == 'ogg':
            f = open('music/' + file, 'rb')
            message = b.send_voice(message.chat.id, f, None)
            await b.send_message("–û—Ç–ª–∏—á–Ω–æ!", message.chat.id, message.voice.file_id, reply_to_message_id=message.message_id, reply_markup=types.ReplyKeyboardRemove())
            await message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
@dp.message_handler(content_types=['document', 'audio'])
def handle_document_audio(message):
    try:
        if message.content_type == 'document':  # wav
            print(message.document)

            file_info = b.get_file(message.document.file_id)
            downloaded_file = b.download_file(file_info.file_path)

            src = 'files/' + message.document.file_name
            with open(src, 'wb') as new_file:
                new_file.write(downloaded_file)

            b.reply_to(message, "–ü–æ–∂–∞–ª—É–π, —è —Å–æ—Ö—Ä–∞–Ω—é —ç—Ç–æ")
        elif message.content_type == 'audio':  # mp3
            print(message.audio)

            file_info = b.get_file(message.audio.file_id)
            downloaded_file = b.download_file(file_info.file_path)

            # –¥–ª—è Windows –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—É—Ç–∏ –≤–∏–¥–∞ files/ –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, 
            # —á—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ files –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å —Ñ–∞–π–ª–æ–º .py
            src = 'files/' + message.audio.file_name
            with open(src, 'wb') as new_file:
                new_file.write(downloaded_file)

            b.reply_to(message, "–ü–æ–∂–∞–ª—É–π, —è —Å–æ—Ö—Ä–∞–Ω—é —ç—Ç–æ")
    except Exception as e:
        b.reply_to(message, str(e))

# ?
@dp.message_handler(Text(equals='dice'))
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤", reply_markup=kb_return_menu)
    await message.delete()

# –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–π –∂–µ –≥–∏—Ñ–∫–æ–π, —á—Ç–æ –±—ã–ª–∞ –ø—Ä–∏—Å–ª–∞–Ω–∞:
@dp.message_handler(content_types=[types.ContentType.ANIMATION])
async def echo_document(message: types.Message):
    await b.message.reply_animation(message.animation.file_id)
    
# –º–µ—Ç–æ–¥ download() –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –≥–¥–µ –∑–∞–ø—É—â–µ–Ω –±–æ—Ç:
@dp.message_handler(content_types=[types.ContentType.DOCUMENT])
async def download_doc(message: types.Message):
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ –∫–∞—Ç–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤ –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
    await b.message.document.download()

# –¢–∏–ø—ã —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–æ–∂–µ –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ-—Ä–∞–∑–Ω–æ–º—É.
@dp.message_handler(content_types=["photo"])
async def download_photo(message: types.Message):
    # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ /tmp/somedir —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!
    await b.message.photo[-1].download(destination="/tmp/somedir/")
    pass

#
import aiogram.utils.markdown as fmt

@dp.message_handler(commands="test2")
async def with_hidden_link(message: types.Message):
    await b.message.answer(
        f"{fmt.hide_link('https://telegram.org/blog/video-calls/ru')}–ö—Ç–æ –±—ã –º–æ–≥ –ø–æ–¥—É–º–∞—Ç—å, —á—Ç–æ "
        f"–≤ 2020 –≥–æ–¥—É –≤ Telegram –ø–æ—è–≤—è—Ç—Å—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏!\n\n–û–±—ã—á–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã "
        f"–≤–æ–∑–Ω–∏–∫–ª–∏ –≤ Telegram –ª–∏—à—å –≤ 2017, –∑–∞–º–µ—Ç–Ω–æ –ø–æ–∑–∂–µ —Å–≤–æ–∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. –ê —Å–ø—É—Å—Ç—è —Ç—Ä–∏ –≥–æ–¥–∞, "
        f"–∫–æ–≥–¥–∞ –æ–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ –ø—Ä–∏—É—á–∏–ª–∏—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ –¥–æ–º–∞ –∏–∑-–∑–∞ —ç–ø–∏–¥–µ–º–∏–∏ "
        f"–∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞, –∫–æ–º–∞–Ω–¥–∞ –ü–∞–≤–ª–∞ –î—É—Ä–æ–≤–∞ –Ω–µ —Ä–∞—Å—Ç–µ—Ä—è–ª–∞—Å—å –∏ —Å–¥–µ–ª–∞–ª–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ "
        f"–≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ –Ω–∞ WebRTC!\n\nP.S. –∞ –µ—â—ë —Ö–æ–¥—è—Ç —Å–ª—É—Ö–∏ –ø—Ä–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Å–≤–æ–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ :)",
        parse_mode=types.ParseMode.HTML)

@dp.message_handler(content_types=["text"])
async def get_text_messages(message: types.Message): 
    if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç' or message.text.lower() == 'ru' or message.text.lower() == '—Å—Ç–∞—Ä—Ç':
        await message.answer('–ü—Ä–∏–≤–µ—Ç!')

    elif message.text.lower() == "hi" or message.text.lower() == 'eng':
        await message.answer('Hello! I am cutie_new_bot. How can i help you?')

    elif message.text.lower() == '–∫–∞–∫ –¥–µ–ª–∞?' or message.text.lower() == '–∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?':
        await message.answer("–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –ê –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?")
    
    elif message.text.lower() == 'how are you?' or message.text.lower() == 'how are u?':
        await message.answer("I'm fine, thanks. And you?")
    
    else:
        await message.answer('Sorry, i dont understand you.')


# 
if __name__ == '__main__':
    try:
        executor.start_polling(dp, skip_updates=True)
    except (KeyboardInterrupt, SystemExit):
        pass
    b.polling(none_stop=True, interval=0.5)
